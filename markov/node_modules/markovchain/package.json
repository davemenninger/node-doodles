{
  "name": "markovchain",
  "version": "0.0.3",
  "description": "generates a markov chain of words based on input files",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/swang/markovchain"
  },
  "keywords": [
    "markov chain",
    "markov"
  ],
  "dependencies": {
    "async": "~0.2.9"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "mocha": "~1.14.0"
  },
  "author": {
    "name": "Shuan Wang"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/swang/markovchain/issues"
  },
  "engines": {
    "node": ">=0.6"
  },
  "readme": "markovchain\n=========================================\nmarkovchain generates a markov chain of words based on input files\n\n[![build status](https://secure.travis-ci.org/swang/markovchain.png)](http://travis-ci.org/swang/markovchain)\n\n## Requirements\n- [node v0.6+](http://nodejs.org/)\n\n## Install\n- npm install markovchain\n\n## Example\n\n```js\nvar MarkovChain = require('markovchain').MarkovChain\n  , quotes = new MarkovChain({ files: 'quotes.txt' })\n\nquotes\n  .start('The') //\n  .end(5)\n  .process(function(err, s) {\n    console.log(s)\n  })\n```\nThis will read a file, \"quotes.txt\", generate a word chain, then attempt to generate sentences starting with the word\n\"The\" that are 5 words long, and then output to console.\n\n### start\nThe `start` method can take in either a `String`, in which case it will look to use that word to start the sentence.\nIf you instead pass a `Function` with one parameter, `wordList`, you will be given the entire list of word chains in which\nyou can decide what words to use to start a sentence. For example, you can generate sentences based on the number of times\na word occurs, or if the word starts with a capital letter.\n\nExample\n```js\n\nvar useUpperCase = function(wordList) {\n  var tmpList = Object.keys(wordList).filter(function(word) { return word[0] >= 'A' && word[0] <= 'Z' })\n  return tmpList[~~(Math.random()*tmpList.length)]\n}\nquotes\n  .start(useUpperCase)\n  .end()\n  .process(function(err, sentence) { console.log(sentence) })\n```\n\n### end\nThe `end` method can take a `String`, `Number`, or `Function`\n\n- If you pass a String, `str`, the markov chain will generate words until the word matches `str` or the generator\ncan no longer find words to chain.\n- If you pass a Number, `num`, the markov chain will generate words until the sentence length matches `num` or the generator\ncan no longer find words to chain.\n- If you pass a Function, `fn`, the markov chain will generate words until function `fn` returns true. `fn` will be passed one\nparameter, `sentence` that returns the generated sentence so far\n\nExample:\n```js\n// same as passing value, 5 to end function\nvar stopAfterFiveWords = function(sentence) {\n  return sentence.split(\" \").length >= 5\n}\n\nquotes\n  .start(useUpperCase)\n  .end(stopAfterFiveWords)\n  .process(function(err, sentence) {\n    console.log(sentence)\n  })\n```\n\n- If you pass nothing in `end`, the markov chain will generate words until it can no longer find words to chain.\n\n## Author\n- [Shuan Wang](https://github.com/swang) [(twitter)](https://twitter.com/swang) (author)\n\n## TODO\n- Cleanup\n\n## CHANGELOG\n0.0.3\n- Passing a Function into `end` has changed a little bit, before the markov chain would continue until\nthe Function passed returned false, now the Function being passed into end() should only return true when\nyou want the markov chain generator to stop generating the sentence.\n- `start` can now accept a Function instead of just a String\n- The logic to split sentences has changed from just a newline, to both a newline and a period.\n- Also previous versions changed all the words to strip them of any non-letters/numbers and also lowercased them. This\nversion now doesn't modify the string other than to delete a period at the end of a word.\n\n0.0.2\n- Small change to how words are stripped\n\n0.0.1\n- Initial Release\n\n## LICENSE\n- MIT\n",
  "readmeFilename": "README.md",
  "_id": "markovchain@0.0.3",
  "dist": {
    "shasum": "886ee7ea0b8b3a35065a2df0afd5dc772d9a1eb9"
  },
  "_from": "markovchain@",
  "_resolved": "https://registry.npmjs.org/markovchain/-/markovchain-0.0.3.tgz"
}
